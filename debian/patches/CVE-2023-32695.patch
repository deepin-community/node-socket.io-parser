Description: check the format of the event name
 A packet like '2[{"toString":"foo"}]' was decoded as:
 .
 {
   type: EVENT,
   data: [ { "toString": "foo" } ]
 }
 .
 Which would then throw an error when passed to the EventEmitter class:
 .
 > TypeError: Cannot convert object to primitive value
 >    at Socket.emit (node:events:507:25)
 >    at .../node_modules/socket.io/lib/socket.js:531:14
Origin: upstream, https://github.com/socketio/socket.io-parser/commit/3b78117b
Author: Damien Arrachequesne <damien.arrachequesne@gmail.com>
Bug: https://github.com/advisories/GHSA-cqmj-92xf-r6r9
Forwarded: not-needed
Applied-Upstream: 4.2.3, commit:3b78117b
Reviewed-By: Yadd <yadd@debian.org>
Last-Update: 2023-05-24

--- a/lib/index.ts
+++ b/lib/index.ts
@@ -272,7 +272,10 @@
         return typeof payload === "string" || typeof payload === "object";
       case PacketType.EVENT:
       case PacketType.BINARY_EVENT:
-        return Array.isArray(payload) && payload.length > 0;
+        return (
+          Array.isArray(payload) &&
+          (typeof payload[0] === "string" || typeof payload[0] === "number")
+        );
       case PacketType.ACK:
       case PacketType.BINARY_ACK:
         return Array.isArray(payload);
--- a/test/parser.js
+++ b/test/parser.js
@@ -142,6 +142,9 @@
     isInvalidPayload("1/admin,{}");
     isInvalidPayload('2/admin,"invalid');
     isInvalidPayload("2/admin,{}");
+    isInvalidPayload('2[{"toString":"foo"}]');
+    isInvalidPayload('2[true,"foo"]');
+    isInvalidPayload('2[null,"bar"]');
 
     expect(() => new Decoder().add("999")).to.throwException(
       /^unknown packet type 9$/
